/**
 * Ponto de entrada principal para o sistema de integra√ß√£o de IA
 * Exporta as principais interfaces e fun√ß√µes para uso nos servi√ßos
 */

// Exportar tipos principais
export type { AIRequest, AIResponse, AIMetrics, AIProviderConfig } from './types';
export type { IAIProvider, IAIManager } from './interfaces';

// Exportar fun√ß√µes principais (inje√ß√£o de depend√™ncia)
export { getAIManager, getAISystemStats } from './container';

// Exportar classes espec√≠ficas (para casos avan√ßados)
export { AIManager } from './manager';
export { OpenRouterProvider } from './providers/openrouter';

/**
 * Fun√ß√µes de conveni√™ncia para casos de uso comuns
 */
import { getAIManager } from './container';
import { AIRequest, AIResponse } from './types';
import { AppError, errorMessages } from '../../utils/ErrorHandler';

/**
 * Fun√ß√£o simples para chat completion
 * Uso: const response = await aiChat('Explique o poder constituinte', 'user');
 */
export async function aiChat(content: string, role: 'user' | 'system' = 'user'): Promise<string> {
  const aiManager = getAIManager();
  
  const request: AIRequest = {
    messages: [{ role, content }],
    temperature: 0.7,
    maxTokens: 1500
  };
  
  const response = await aiManager.request(request, {
    question: role === 'user' ? content : undefined
  });
  return response.content;
}

/**
 * Fun√ß√£o para chat com contexto (ex: RAG)
 */
export async function aiChatWithContext(
  userMessage: string, 
  systemContext: string,
  options: {
    temperature?: number;
    maxTokens?: number;
    model?: string;
  } = {}
): Promise<AIResponse> {
  const aiManager = getAIManager();
  
  const request: AIRequest = {
    model: options.model,
    messages: [
      { role: 'system', content: systemContext },
      { role: 'user', content: userMessage }
    ],
    temperature: options.temperature || 0.7,
    maxTokens: options.maxTokens || 1500
  };
  
  // Usar contexto inteligente para sele√ß√£o de modelo
  return aiManager.request(request, {
    question: userMessage,
    knowledgeContext: systemContext
  });
}

/**
 * Parser robusto e flex√≠vel para respostas JSON da IA
 * SOLU√á√ÉO: M√∫ltiplos m√©todos + logs detalhados + fallback manual
 */
function parseAIResponseRobust(response: string, context: string): any {
  try {
    console.log(`üîç DEBUG: Parsing resposta da IA para ${context}`);
    console.log(`üìù RESPOSTA COMPLETA DA IA:\n${response}\n--- FIM DA RESPOSTA ---`);
    
    // M√∫ltiplas tentativas de extra√ß√£o de JSON
    let parsed: any = null;
    
    // Tentativa 1: JSON completo na resposta
    try {
      const fullJsonMatch = response.match(/\{[\s\S]*\}/);
      if (fullJsonMatch) {
        parsed = JSON.parse(fullJsonMatch[0]);
        console.log(`‚úÖ JSON parseado (m√©todo 1):`, parsed);
      }
    } catch (e) {
      console.log(`‚ö†Ô∏è M√©todo 1 falhou:`, e);
    }
    
    // Tentativa 2: JSON dentro de c√≥digo (```json)
    if (!parsed) {
      try {
        const codeBlockMatch = response.match(/```json\n?([\s\S]*?)\n?```/);
        if (codeBlockMatch) {
          parsed = JSON.parse(codeBlockMatch[1].trim());
          console.log(`‚úÖ JSON parseado (m√©todo 2):`, parsed);
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è M√©todo 2 falhou:`, e);
      }
    }
    
    // Tentativa 3: Buscar arrays espec√≠ficos (para flashcards)
    if (!parsed) {
      try {
        const flashcardsMatch = response.match(/"flashcards":\s*\[([\s\S]*?)\]/);
        if (flashcardsMatch) {
          const flashcardsContent = `[${flashcardsMatch[1]}]`;
          const flashcardsArray = JSON.parse(flashcardsContent);
          parsed = { flashcards: flashcardsArray };
          console.log(`‚úÖ JSON parseado (m√©todo 3 - flashcards):`, parsed);
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è M√©todo 3 falhou:`, e);
      }
    }
    
    // Tentativa 4: Buscar qualquer array
    if (!parsed) {
      try {
        const arrayMatch = response.match(/\[([\s\S]*?)\]/);
        if (arrayMatch) {
          const arrayContent = JSON.parse(arrayMatch[0]);
          parsed = { data: arrayContent };
          console.log(`‚úÖ JSON parseado (m√©todo 4 - array gen√©rico):`, parsed);
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è M√©todo 4 falhou:`, e);
      }
    }
    
    if (!parsed) {
      console.warn(`‚ùå NENHUM JSON V√ÅLIDO ENCONTRADO na resposta para ${context}`);
      console.log(`üìã Tentando interpreta√ß√£o manual da resposta...`);
      
      // Fallback manual - retorna estrutura m√≠nima
      if (context.includes('flashcard')) {
        return { flashcards: [] };
      }
      
      return {};
    }

    console.log(`‚úÖ Parsing bem-sucedido para ${context}:`, parsed);
    return parsed;
    
  } catch (error) {
    console.error(`‚ùå Erro cr√≠tico no parsing para ${context}:`, error);
    console.log(`üìù Resposta que causou erro: ${response.substring(0, 1000)}...`);
    
    // Retorno de emerg√™ncia
    if (context.includes('flashcard')) {
      return { flashcards: [] };
    }
    
    return {};
  }
}

/**
 * Fun√ß√£o para an√°lise de texto com retorno JSON
 */
export async function aiAnalyze<T = any>(
  content: string, 
  instruction: string,
  options: {
    temperature?: number;
    maxTokens?: number;
  } = {}
): Promise<T> {
  const aiManager = getAIManager();
  
  const request: AIRequest = {
    messages: [
      { 
        role: 'system', 
        content: `${instruction}\n\nResponda APENAS com JSON v√°lido, sem texto adicional.` 
      },
      { role: 'user', content }
    ],
    temperature: options.temperature || 0.3,
    maxTokens: options.maxTokens || 1000
  };
  
  const response = await aiManager.request(request, {
    question: content
  });
  
  // Parser robusto e flex√≠vel para JSON (mesmo que criamos para editais)
  return parseAIResponseRobust(response.content, 'resultado da an√°lise');
}