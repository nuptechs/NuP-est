import OpenAI from 'openai';

interface ChunkGenerationRequest {
  content: string;
  fileName: string;
  fileType: string;
  concursoNome: string;
  maxChunks?: number;
}

interface GeneratedChunk {
  id: string;
  content: string;
  title: string;
  summary: string;
  keywords: string[];
  chunkIndex: number;
}

interface DeepSeekChunkResponse {
  chunks: GeneratedChunk[];
  totalChunks: number;
  processingTime: number;
}

interface CargoAnalysisRequest {
  content: string;
  fileName: string;
  concursoNome: string;
}

interface CargoAnalysisResponse {
  hasSingleCargo: boolean;
  cargoName?: string;
  cargos?: string[];
  totalCargos: number;
  explicacao: string;
}

interface ConteudoProgramaticoRequest {
  content: string;
  cargoName: string;
  concursoNome: string;
}

interface ConteudoProgramaticoResponse {
  cargo: string;
  disciplinas: {
    nome: string;
    topicos: string[];
  }[];
}

export class DeepSeekService {
  private openai: OpenAI;

  constructor() {
    // Usar OpenRouter para acessar DeepSeek R1
    this.openai = new OpenAI({
      baseURL: "https://openrouter.ai/api/v1",
      apiKey: process.env.OPENROUTER_API_KEY,
    });
  }

  /**
   * Gera chunks inteligentes usando DeepSeek R1
   */
  async generateIntelligentChunks(request: ChunkGenerationRequest): Promise<DeepSeekChunkResponse> {
    const startTime = Date.now();
    console.log(`üß† Gerando chunks com DeepSeek R1 para: ${request.fileName}`);

    try {
      const prompt = this.buildChunkGenerationPrompt(request);
      
      const completion = await this.openai.chat.completions.create({
        model: "deepseek/deepseek-r1",
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um especialista em processamento de documentos para concursos p√∫blicos. Sua tarefa √© analisar conte√∫do de editais e gerar chunks inteligentes que capturem informa√ß√µes importantes de forma estruturada."
          },
          {
            role: "user", 
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 4000,
      });

      const response = completion.choices[0].message.content;
      
      if (!response) {
        throw new Error('DeepSeek R1 n√£o retornou resposta v√°lida');
      }

      // Parse da resposta JSON
      const parsedResponse = this.parseChunkResponse(response);
      
      const processingTime = Date.now() - startTime;
      console.log(`‚úÖ DeepSeek R1 gerou ${parsedResponse.chunks.length} chunks em ${processingTime}ms`);

      return {
        ...parsedResponse,
        processingTime
      };

    } catch (error) {
      console.error('‚ùå Erro no DeepSeek R1 para gera√ß√£o de chunks:', error);
      throw new Error(`Falha na gera√ß√£o de chunks com DeepSeek R1: ${(error as Error).message}`);
    }
  }

  /**
   * Analisa se o edital tem um √∫nico cargo ou m√∫ltiplos cargos
   */
  async analyzeCargos(request: CargoAnalysisRequest): Promise<CargoAnalysisResponse> {
    console.log(`üîç Analisando cargos com DeepSeek R1 para: ${request.fileName}`);

    try {
      const prompt = this.buildCargoAnalysisPrompt(request);
      
      const completion = await this.openai.chat.completions.create({
        model: "deepseek/deepseek-r1",
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um especialista em an√°lise de editais de concursos p√∫blicos. Sua tarefa √© identificar quantos cargos est√£o sendo oferecidos em um edital e extrair seus nomes de forma precisa."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 1000,
      });

      const response = completion.choices[0].message.content;
      
      if (!response) {
        throw new Error('DeepSeek R1 n√£o retornou resposta v√°lida para an√°lise de cargos');
      }

      const parsedResponse = this.parseCargoAnalysisResponse(response);
      console.log(`‚úÖ An√°lise de cargos conclu√≠da: ${parsedResponse.hasSingleCargo ? 'cargo √∫nico' : 'm√∫ltiplos cargos'}`);

      return parsedResponse;

    } catch (error) {
      console.error('‚ùå Erro no DeepSeek R1 para an√°lise de cargos:', error);
      throw new Error(`Falha na an√°lise de cargos com DeepSeek R1: ${(error as Error).message}`);
    }
  }

  /**
   * Extrai conte√∫do program√°tico de um cargo espec√≠fico
   */
  async extractConteudoProgramatico(request: ConteudoProgramaticoRequest): Promise<ConteudoProgramaticoResponse> {
    console.log(`üìö Extraindo conte√∫do program√°tico com DeepSeek R1 para cargo: ${request.cargoName}`);

    try {
      const prompt = this.buildConteudoProgramaticoPrompt(request);
      
      const completion = await this.openai.chat.completions.create({
        model: "deepseek/deepseek-r1",
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um especialista em extra√ß√£o de conte√∫do program√°tico de editais de concursos p√∫blicos. Sua tarefa √© identificar e estruturar as disciplinas e t√≥picos de estudo de forma hier√°rquica e organizada."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 3000,
      });

      const response = completion.choices[0].message.content;
      
      if (!response) {
        throw new Error('DeepSeek R1 n√£o retornou resposta v√°lida para extra√ß√£o de conte√∫do');
      }

      const parsedResponse = this.parseConteudoProgramaticoResponse(response);
      console.log(`‚úÖ Conte√∫do program√°tico extra√≠do: ${parsedResponse.disciplinas.length} disciplinas`);

      return parsedResponse;

    } catch (error) {
      console.error('‚ùå Erro no DeepSeek R1 para extra√ß√£o de conte√∫do program√°tico:', error);
      throw new Error(`Falha na extra√ß√£o de conte√∫do program√°tico com DeepSeek R1: ${(error as Error).message}`);
    }
  }

  /**
   * Constr√≥i o prompt para gera√ß√£o de chunks
   */
  private buildChunkGenerationPrompt(request: ChunkGenerationRequest): string {
    const maxChunks = request.maxChunks || 50;
    
    return `
TAREFA: Analise o seguinte conte√∫do de edital de concurso p√∫blico e gere chunks inteligentes que capturem informa√ß√µes importantes.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${request.fileName}
- Tipo: ${request.fileType}
- Concurso: ${request.concursoNome}

CONTE√öDO:
${request.content.substring(0, 8000)} ${request.content.length > 8000 ? '...' : ''}

INSTRU√á√ïES:
1. Analise o conte√∫do e identifique se√ß√µes importantes (cargos, requisitos, conte√∫do program√°tico, cronograma, etc.)
2. Crie chunks sem√¢nticos que mant√™m contexto completo
3. Cada chunk deve ter entre 200-800 caracteres
4. Gere no m√°ximo ${maxChunks} chunks
5. Priorize informa√ß√µes sobre cargos, requisitos e conte√∫do program√°tico
6. Para cada chunk, forne√ßa t√≠tulo, resumo e palavras-chave

FORMATO DE RESPOSTA (JSON):
{
  "chunks": [
    {
      "id": "chunk_001",
      "content": "Conte√∫do do chunk...",
      "title": "T√≠tulo descritivo",
      "summary": "Resumo do que cont√©m",
      "keywords": ["palavra1", "palavra2", "palavra3"],
      "chunkIndex": 0
    }
  ],
  "totalChunks": n√∫mero_total_de_chunks
}
`;
  }

  /**
   * Constr√≥i o prompt para an√°lise de cargos
   */
  private buildCargoAnalysisPrompt(request: CargoAnalysisRequest): string {
    return `
TAREFA: Analise o seguinte edital e determine quantos cargos est√£o sendo oferecidos.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${request.fileName}
- Concurso: ${request.concursoNome}

CONTE√öDO DO EDITAL:
${request.content.substring(0, 4000)} ${request.content.length > 4000 ? '...' : ''}

INSTRU√á√ïES:
1. Identifique todos os cargos oferecidos no edital
2. Determine se h√° apenas UM cargo ou M√öLTIPLOS cargos
3. Se for apenas um cargo, extraia o nome exato
4. Se forem m√∫ltiplos, liste todos os cargos

FORMATO DE RESPOSTA (JSON):
{
  "hasSingleCargo": true/false,
  "cargoName": "Nome exato do cargo (apenas se for √∫nico)",
  "cargos": ["lista", "de", "cargos"] (apenas se forem m√∫ltiplos),
  "totalCargos": n√∫mero_total,
  "explicacao": "Breve explica√ß√£o da an√°lise"
}
`;
  }

  /**
   * Constr√≥i o prompt para extra√ß√£o de conte√∫do program√°tico
   */
  private buildConteudoProgramaticoPrompt(request: ConteudoProgramaticoRequest): string {
    return `
TAREFA: Extraia o conte√∫do program√°tico para o cargo "${request.cargoName}" do seguinte edital.

INFORMA√á√ïES:
- Cargo: ${request.cargoName}
- Concurso: ${request.concursoNome}

CONTE√öDO DO EDITAL:
${request.content.substring(0, 6000)} ${request.content.length > 6000 ? '...' : ''}

INSTRU√á√ïES:
1. Encontre a se√ß√£o de conte√∫do program√°tico/disciplinas para o cargo espec√≠fico
2. Organize as disciplinas e seus respectivos t√≥picos
3. Mantenha a estrutura hier√°rquica original
4. Seja preciso e completo na extra√ß√£o

FORMATO DE RESPOSTA (JSON):
{
  "cargo": "${request.cargoName}",
  "disciplinas": [
    {
      "nome": "Nome da disciplina",
      "topicos": [
        "T√≥pico 1",
        "T√≥pico 2",
        "Subt√≥pico com detalhes"
      ]
    }
  ]
}
`;
  }

  /**
   * Faz parse da resposta de gera√ß√£o de chunks
   */
  private parseChunkResponse(response: string): { chunks: GeneratedChunk[]; totalChunks: number } {
    try {
      // Tentar extrair JSON da resposta
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Resposta n√£o cont√©m JSON v√°lido');
      }

      const parsed = JSON.parse(jsonMatch[0]);
      
      if (!parsed.chunks || !Array.isArray(parsed.chunks)) {
        throw new Error('Resposta n√£o cont√©m array de chunks v√°lido');
      }

      return {
        chunks: parsed.chunks,
        totalChunks: parsed.totalChunks || parsed.chunks.length
      };
    } catch (error) {
      console.error('‚ùå Erro ao fazer parse da resposta de chunks:', error);
      console.error('‚ùå Resposta original:', response);
      throw new Error('Falha ao interpretar resposta do DeepSeek R1 para chunks');
    }
  }

  /**
   * Faz parse da resposta de an√°lise de cargos
   */
  private parseCargoAnalysisResponse(response: string): CargoAnalysisResponse {
    try {
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Resposta n√£o cont√©m JSON v√°lido');
      }

      const parsed = JSON.parse(jsonMatch[0]);
      
      if (typeof parsed.hasSingleCargo === 'undefined') {
        throw new Error('Resposta n√£o cont√©m propriedade hasSingleCargo');
      }

      return {
        hasSingleCargo: parsed.hasSingleCargo,
        cargoName: parsed.cargoName,
        cargos: parsed.cargos,
        totalCargos: parsed.totalCargos || 0,
        explicacao: parsed.explicacao || ''
      };
    } catch (error) {
      console.error('‚ùå Erro ao fazer parse da resposta de an√°lise de cargos:', error);
      console.error('‚ùå Resposta original:', response);
      throw new Error('Falha ao interpretar resposta do DeepSeek R1 para an√°lise de cargos');
    }
  }

  /**
   * Faz parse da resposta de conte√∫do program√°tico
   */
  private parseConteudoProgramaticoResponse(response: string): ConteudoProgramaticoResponse {
    try {
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Resposta n√£o cont√©m JSON v√°lido');
      }

      const parsed = JSON.parse(jsonMatch[0]);
      
      if (!parsed.cargo || !parsed.disciplinas || !Array.isArray(parsed.disciplinas)) {
        throw new Error('Resposta n√£o cont√©m estrutura v√°lida de conte√∫do program√°tico');
      }

      return {
        cargo: parsed.cargo,
        disciplinas: parsed.disciplinas
      };
    } catch (error) {
      console.error('‚ùå Erro ao fazer parse da resposta de conte√∫do program√°tico:', error);
      console.error('‚ùå Resposta original:', response);
      throw new Error('Falha ao interpretar resposta do DeepSeek R1 para conte√∫do program√°tico');
    }
  }
}

export const deepseekService = new DeepSeekService();