import { RAGService } from './rag';
import { pineconeService } from './pinecone';
import { aiChatWithContext } from './ai/index';

interface CargoInfo {
  nome: string;
  requisitos?: string;
  atribuicoes?: string;
  salario?: string;
  cargaHoraria?: string;
  vagas?: number;
  similarity: number;
  fonte: string;
}

interface ConteudoProgramaticoInfo {
  disciplina: string;
  topicos: string[];
  detalhamento?: string;
  similarity: number;
  fonte: string;
}

export class EditalRAGService {
  private ragService = new RAGService();

  /**
   * NOVO: An√°lise completa de edital com queries estruturadas em JSON
   */
  async analyzeEdital(userId: string, documentId: string): Promise<{
    cargos: Array<{
      nome: string;
      requisitos?: string;
      atribuicoes?: string;
      salario?: string;
      vagas?: number;
    }>;
    conteudoProgramatico: Array<{
      disciplina: string;
      topicos: string[];
    }>;
    rawResponses: {
      cargoAnalysis: string;
      conteudoAnalysis: string;
    };
    hasMultipleCargos: boolean;
  }> {
    try {
      console.log(`üîç Iniciando an√°lise completa para documento ${documentId}`);
      
      // Query 1: An√°lise de cargos com prompt estruturado MUITO MAIS RIGOROSO
      const cargoQuery = `
INSTRU√á√ÉO CR√çTICA: Voc√™ DEVE responder APENAS com JSON v√°lido, sem qualquer texto adicional antes ou depois.

Analise este edital e extraia informa√ß√µes sobre os cargos/vagas dispon√≠veis.

FORMATO OBRIGAT√ìRIO - COPIE EXATAMENTE:
{
  "cargos": [
    {
      "nome": "Nome exato do cargo encontrado no edital",
      "requisitos": "Requisitos de forma√ß√£o e experi√™ncia",
      "atribuicoes": "Principais atribui√ß√µes do cargo", 
      "salario": "Valor do sal√°rio ou vencimento",
      "vagas": 10
    }
  ]
}

REGRAS CR√çTICAS:
- Responda APENAS com o JSON, sem explica√ß√µes
- Se encontrar m√∫ltiplos cargos, inclua todos no array
- Se n√£o encontrar alguma informa√ß√£o, use "N√£o especificado no edital"
- Use aspas duplas para strings
- N√∫meros sem aspas
- JSON deve ser v√°lido e parse√°vel
`.trim();

      const cargoResult = await this.ragService.generateContextualResponse({
        userId,
        query: cargoQuery,
        // documentId, // REMOVIDO TEMPORARIAMENTE devido a IDs duplicados no servi√ßo externo
        maxContextLength: 8000,
        minSimilarity: 0.2,
        enableReRanking: true,
        initialTopK: 20,
        finalTopK: 10
      });

      // Query 2: An√°lise de conhecimentos - M√öLTIPLAS BUSCAS ESPEC√çFICAS
      const conhecimentosQueries = [
        "conhecimentos necess√°rios disciplinas mat√©rias programa conte√∫do program√°tico",
        "anexo conhecimentos programa mat√©rias disciplinas t√≥picos assuntos",
        "conte√∫do program√°tico detalhado disciplinas conhecimentos programa",
        "mat√©rias conhecimentos programa detalhado anexo disciplinas conte√∫do"
      ];

      let allKnowledgeContent = "";
      let bestContexts: any[] = [];

      // SOLU√á√ÉO TEMPOR√ÅRIA: Remover filtro por documento espec√≠fico 
      // (problema: servi√ßo externo usa mesmo ID para documentos diferentes)
      console.log(`‚ö†Ô∏è TEMPOR√ÅRIO: Removendo filtro por documento devido a problema de IDs duplicados`);
      
      // Executar m√∫ltiplas queries para encontrar se√ß√µes de conhecimentos
      for (const searchQuery of conhecimentosQueries) {
        try {
          const result = await this.ragService.generateContextualResponse({
            userId,
            query: searchQuery,
            // documentId, // REMOVIDO TEMPORARIAMENTE
            maxContextLength: 4000,
            minSimilarity: 0.1, // Reduzir threshold para captat mais conte√∫do
            enableReRanking: true,
            initialTopK: 25,
            finalTopK: 12
          });

          if (result.hasContext && result.contextUsed.length > 0) {
            // Filtrar por conte√∫do que pare√ßa ser de edital/conhecimentos
            const editalContent = result.contextUsed
              .filter(ctx => 
                ctx.content.toLowerCase().includes('conhecimento') ||
                ctx.content.toLowerCase().includes('disciplina') ||
                ctx.content.toLowerCase().includes('programa') ||
                ctx.content.toLowerCase().includes('anexo') ||
                ctx.content.toLowerCase().includes('mat√©ria') ||
                ctx.content.toLowerCase().includes('conte√∫do program√°tico')
              );
              
            if (editalContent.length > 0) {
              allKnowledgeContent += editalContent.map(ctx => ctx.content).join("\n\n") + "\n\n";
              bestContexts.push(...editalContent);
            } else {
              // Se n√£o achou conte√∫do espec√≠fico, usar os primeiros resultados
              allKnowledgeContent += result.contextUsed.slice(0, 3).map(ctx => ctx.content).join("\n\n") + "\n\n";
              bestContexts.push(...result.contextUsed.slice(0, 3));
            }
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erro na query "${searchQuery}":`, error);
        }
      }

      // Prompt espec√≠fico para extrair conhecimentos de editais
      const conteudoQuery = `
Com base no seguinte conte√∫do extra√≠do do edital, identifique e organize APENAS os conhecimentos/disciplinas para a prova.

CONTEXTO DO EDITAL:
${allKnowledgeContent.substring(0, 6000)}

INSTRU√á√ïES ESPEC√çFICAS:
1. Procure por se√ß√µes como "CONHECIMENTOS", "CONTE√öDO PROGRAM√ÅTICO", "ANEXO", "DISCIPLINAS", "MAT√âRIAS" 
2. Ignore quest√µes de exemplo, gabaritos, ou conte√∫do de provas anteriores
3. Foque apenas no programa/conte√∫do que ser√° cobrado na prova
4. Organize as disciplinas de forma hier√°rquica com seus t√≥picos

Retorne um JSON v√°lido no seguinte formato:
{
  "conteudoProgramatico": [
    {
      "disciplina": "Nome exato da disciplina/mat√©ria",
      "topicos": [
        "T√≥pico 1 espec√≠fico da disciplina",
        "T√≥pico 2 espec√≠fico da disciplina",
        "T√≥pico 3 espec√≠fico da disciplina"
      ]
    }
  ]
}

Se n√£o encontrar conhecimentos espec√≠ficos, retorne array vazio. Seja preciso e organize apenas o que est√° claramente definido como conte√∫do da prova.
`.trim();

      // Log para debug do filtering
      console.log(`üîç Coletado ${allKnowledgeContent.length} caracteres de contexto de conhecimentos`);
      console.log(`üìö Total de contextos √∫nicos encontrados: ${bestContexts.length}`);
      
      // Se n√£o encontrou contexto suficiente, fazer busca mais ampla
      if (allKnowledgeContent.length < 500) {
        console.log(`‚ö†Ô∏è Pouco contexto encontrado (${allKnowledgeContent.length} chars). Fazendo busca mais ampla...`);
        
        try {
          const fallbackResult = await this.ragService.generateContextualResponse({
            userId,
            query: "programa conte√∫do conhecimentos anexo disciplinas",
            // documentId, // REMOVIDO TEMPORARIAMENTE
            maxContextLength: 8000,
            minSimilarity: 0.05, // Threshold muito baixo para captat qualquer coisa
            enableReRanking: true,
            initialTopK: 30,
            finalTopK: 15
          });
          
          if (fallbackResult.hasContext) {
            allKnowledgeContent = fallbackResult.contextUsed.map(ctx => ctx.content).join("\n\n");
            console.log(`üîÑ Fallback: coletado ${allKnowledgeContent.length} caracteres adicionais`);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro no fallback search:', error);
        }
      }

      // Usar IA diretamente com o contexto coletado (n√£o fazer nova query RAG)
      const conteudoResult = await this.processKnowledgeWithAI(conteudoQuery);

      // Processar e validar respostas JSON
      const cargosData = this.parseJsonResponse(cargoResult.response, 'cargos');
      const conteudoData = this.parseJsonResponse(conteudoResult.response, 'conteudoProgramatico');

      console.log(`‚úÖ An√°lise conclu√≠da: ${cargosData.cargos?.length || 0} cargos, ${conteudoData.conteudoProgramatico?.length || 0} disciplinas`);

      return {
        cargos: cargosData.cargos || [],
        conteudoProgramatico: conteudoData.conteudoProgramatico || [],
        rawResponses: {
          cargoAnalysis: cargoResult.response,
          conteudoAnalysis: conteudoResult.response
        },
        hasMultipleCargos: (cargosData.cargos?.length || 0) > 1
      };

    } catch (error) {
      console.error('‚ùå Erro na an√°lise do edital:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      throw new Error(`Falha na an√°lise do edital: ${errorMessage}`);
    }
  }

  /**
   * Processa conhecimentos usando IA diretamente com contexto coletado
   */
  private async processKnowledgeWithAI(prompt: string): Promise<{ response: string }> {
    try {
      const aiResponse = await aiChatWithContext(
        prompt,
        "Voc√™ √© um especialista em an√°lise de editais de concursos. Extraia e organize conhecimentos de forma precisa e hier√°rquica. Responda SEMPRE em JSON v√°lido.",
        {
          temperature: 0.1,
          maxTokens: 3000
        }
      );

      return {
        response: aiResponse.content || '{}'
      };
    } catch (error) {
      console.error('‚ùå Erro no processamento de conhecimentos com IA:', error);
      return {
        response: '{"conteudoProgramatico": []}'
      };
    }
  }

  /**
   * Parser seguro para respostas JSON da IA - VERS√ÉO MELHORADA
   */
  private parseJsonResponse(response: string, expectedField: string): any {
    try {
      console.log(`üîç DEBUG: Parsing resposta para ${expectedField}`);
      console.log(`üìù RESPOSTA COMPLETA DA IA:\n${response}\n--- FIM DA RESPOSTA ---`);
      
      // M√∫ltiplas tentativas de extra√ß√£o de JSON
      let parsed: any = null;
      
      // Tentativa 1: JSON completo na resposta
      try {
        const fullJsonMatch = response.match(/\{[\s\S]*\}/);
        if (fullJsonMatch) {
          parsed = JSON.parse(fullJsonMatch[0]);
          console.log(`‚úÖ JSON parseado (m√©todo 1):`, parsed);
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è M√©todo 1 falhou:`, e);
      }
      
      // Tentativa 2: JSON dentro de c√≥digo (```json)
      if (!parsed) {
        try {
          const codeBlockMatch = response.match(/```json\n?([\s\S]*?)\n?```/);
          if (codeBlockMatch) {
            parsed = JSON.parse(codeBlockMatch[1].trim());
            console.log(`‚úÖ JSON parseado (m√©todo 2):`, parsed);
          }
        } catch (e) {
          console.log(`‚ö†Ô∏è M√©todo 2 falhou:`, e);
        }
      }
      
      // Tentativa 3: Buscar apenas pelo campo esperado
      if (!parsed) {
        try {
          const fieldRegex = new RegExp(`"${expectedField}"\\s*:\\s*\\[([\\s\\S]*?)\\]`, 'i');
          const fieldMatch = response.match(fieldRegex);
          if (fieldMatch) {
            const fieldContent = `[${fieldMatch[1]}]`;
            parsed = { [expectedField]: JSON.parse(fieldContent) };
            console.log(`‚úÖ JSON parseado (m√©todo 3):`, parsed);
          }
        } catch (e) {
          console.log(`‚ö†Ô∏è M√©todo 3 falhou:`, e);
        }
      }
      
      if (!parsed) {
        console.warn(`‚ùå NENHUM JSON V√ÅLIDO ENCONTRADO na resposta para ${expectedField}`);
        console.log(`üìã Tentando interpreta√ß√£o manual da resposta...`);
        
        // Interpreta√ß√£o manual se a IA respondeu em texto
        if (response.toLowerCase().includes('cargo') && expectedField === 'cargos') {
          return this.manualCargoExtraction(response);
        }
        
        if (response.toLowerCase().includes('disciplina') && expectedField === 'conteudoProgramatico') {
          return this.manualConteudoExtraction(response);
        }
        
        return { [expectedField]: [] };
      }

      if (!parsed[expectedField]) {
        console.warn(`‚ö†Ô∏è Campo ${expectedField} n√£o encontrado no JSON parseado`);
        console.log(`üìã Campos dispon√≠veis:`, Object.keys(parsed));
        return { [expectedField]: [] };
      }

      console.log(`‚úÖ Extra√ß√£o bem-sucedida para ${expectedField}:`, parsed[expectedField]);
      return parsed;
      
    } catch (error) {
      console.error(`‚ùå Erro cr√≠tico no parsing para ${expectedField}:`, error);
      console.log(`üìù Resposta que causou erro: ${response.substring(0, 1000)}...`);
      return { [expectedField]: [] };
    }
  }

  /**
   * Extra√ß√£o manual de cargos quando JSON falha
   */
  private manualCargoExtraction(response: string): any {
    console.log(`üîß Tentando extra√ß√£o manual de cargos...`);
    
    // Buscar padr√µes t√≠picos de nomes de cargos
    const cargoPatterns = [
      /cargo[:\s]*([^\n\r.]+)/gi,
      /vaga[:\s]*([^\n\r.]+)/gi,
      /fun√ß√£o[:\s]*([^\n\r.]+)/gi,
      /posi√ß√£o[:\s]*([^\n\r.]+)/gi
    ];
    
    let cargosEncontrados: any[] = [];
    
    for (const pattern of cargoPatterns) {
      const matches = response.matchAll(pattern);
      for (const match of matches) {
        const nome = match[1].trim();
        if (nome.length > 5) { // Filtrar matches muito curtos
          cargosEncontrados.push({
            nome: nome,
            requisitos: "Conforme edital",
            atribuicoes: "Conforme edital",
            salario: "A consultar no edital"
          });
        }
      }
    }
    
    if (cargosEncontrados.length > 0) {
      console.log(`‚úÖ Extra√ß√£o manual encontrou ${cargosEncontrados.length} cargos`);
      return { cargos: cargosEncontrados.slice(0, 3) }; // Limitar a 3 para evitar duplicatas
    }
    
    return { cargos: [] };
  }

  /**
   * Extra√ß√£o manual de conte√∫do program√°tico quando JSON falha
   */
  private manualConteudoExtraction(response: string): any {
    console.log(`üîß Tentando extra√ß√£o manual de conte√∫do program√°tico...`);
    
    const lines = response.split('\n');
    let disciplinas: any[] = [];
    let currentDisciplina = '';
    let currentTopicos: string[] = [];
    
    for (const line of lines) {
      const cleanLine = line.trim();
      
      // Detectar disciplina (linha que parece ser t√≠tulo)
      if (cleanLine.match(/^[A-Z][a-zA-Z\s]+:?$/) || cleanLine.includes('Disciplina') || cleanLine.includes('Mat√©ria')) {
        if (currentDisciplina && currentTopicos.length > 0) {
          disciplinas.push({
            disciplina: currentDisciplina,
            topicos: [...currentTopicos]
          });
        }
        currentDisciplina = cleanLine.replace(':', '');
        currentTopicos = [];
      }
      // Detectar t√≥picos (linhas que come√ßam com - ou n√∫mero)
      else if (cleanLine.match(/^[-‚Ä¢*]\s/) || cleanLine.match(/^\d+\.?\s/)) {
        const topico = cleanLine.replace(/^[-‚Ä¢*\d\.]\s*/, '').trim();
        if (topico.length > 5) {
          currentTopicos.push(topico);
        }
      }
    }
    
    // Adicionar √∫ltima disciplina
    if (currentDisciplina && currentTopicos.length > 0) {
      disciplinas.push({
        disciplina: currentDisciplina,
        topicos: currentTopicos
      });
    }
    
    if (disciplinas.length > 0) {
      console.log(`‚úÖ Extra√ß√£o manual encontrou ${disciplinas.length} disciplinas`);
      return { conteudoProgramatico: disciplinas };
    }
    
    return { conteudoProgramatico: [] };
  }

  /**
   * Busca informa√ß√µes sobre cargos em documentos processados
   */
  async buscarCargos(userId: string, query: string = "cargos vagas concurso"): Promise<{
    cargos: CargoInfo[];
    resumoGeral: string;
    totalEncontrado: number;
  }> {
    try {
      console.log(`üéØ Buscando cargos para usu√°rio ${userId}...`);

      // Buscar contexto relevante usando RAG com queries espec√≠ficas para cargos
      const cargosQueries = [
        "cargo vaga requisitos forma√ß√£o",
        "atribui√ß√µes fun√ß√£o descri√ß√£o cargo",
        "sal√°rio remunera√ß√£o benef√≠cios",
        "carga hor√°ria trabalho",
        "n√∫mero vagas dispon√≠veis"
      ];

      let todosResultados: any[] = [];
      
      for (const cargoQuery of cargosQueries) {
        console.log(`üîç Buscando: "${query} ${cargoQuery}" para userId: ${userId}`);
        
        const resultados = await pineconeService.searchSimilarContent(
          `${query} ${cargoQuery}`,
          userId,
          {
            topK: 15,
            // Remover filtro de categoria - buscar todos os dados do usu√°rio
            minSimilarity: 0.2 // Menos restritivo
          }
        );
        
        console.log(`üîç Query "${cargoQuery}" retornou ${resultados.length} resultados`);
        todosResultados = [...todosResultados, ...resultados];
      }

      // Remover duplicatas baseado no conte√∫do
      const resultadosUnicos = todosResultados.filter((item, index, arr) => 
        arr.findIndex(t => t.content === item.content) === index
      );

      if (resultadosUnicos.length === 0) {
        console.log(`‚ùå Nenhum resultado encontrado no Pinecone para userId: ${userId}`);
        
        // SEM FALLBACK - falhar diretamente
        throw new Error('Nenhum dado encontrado no Pinecone para este usu√°rio. Verifique se o documento foi indexado corretamente.');
      }

      // Usar apenas resultados √∫nicos - SEM FALLBACK
      const resultadosParaProcessar = resultadosUnicos;
      
      // Usar AI para extrair e estruturar informa√ß√µes sobre cargos
      const contextText = resultadosParaProcessar
        .slice(0, 15) // Limitar para n√£o sobrecarregar
        .map(r => `[${r.title}] ${r.content}`)
        .join('\n\n---\n\n');
        
      console.log(`üìù Processando ${resultadosParaProcessar.length} resultados para an√°lise de cargos`);

      const prompt = `Analise EXCLUSIVAMENTE o contexto dos documentos fornecidos e extraia informa√ß√µes sobre cargos de concurso p√∫blico.

‚ö†Ô∏è  IMPORTANTE: Use APENAS informa√ß√µes presentes nestes documentos espec√≠ficos. N√ÉO use conhecimento pr√©vio sobre outros concursos.

CONTEXTO DOS DOCUMENTOS ATUAIS:
${contextText}

INSTRU√á√ïES CR√çTICAS:
1. Identifique cargos mencionados APENAS nestes documentos espec√≠ficos
2. Extraia o nome EXATO dos cargos conforme aparecem nos documentos
3. Se o documento menciona estado/UF espec√≠fico (SE, DF, RJ, etc.), mantenha essa informa√ß√£o EXATA
4. Para cada cargo, extraia:
   - Nome EXATO do cargo conforme aparece no documento
   - Requisitos de forma√ß√£o quando dispon√≠vel
   - Atribui√ß√µes e fun√ß√µes quando dispon√≠vel  
   - Sal√°rio/remunera√ß√£o quando dispon√≠vel
   - Carga hor√°ria quando dispon√≠vel
   - N√∫mero de vagas quando dispon√≠vel
5. Se alguma informa√ß√£o n√£o estiver nos documentos, marque como "N√£o informado"
6. N√ÉO invente ou complemente informa√ß√µes com conhecimento externo

Responda em JSON no seguinte formato:
{
  "cargos": [
    {
      "nome": "Nome exato do cargo conforme documento (incluindo UF se mencionada)",
      "requisitos": "Requisitos ou 'N√£o informado'",
      "atribuicoes": "Atribui√ß√µes ou 'N√£o informado'", 
      "salario": "Sal√°rio ou 'N√£o informado'",
      "cargaHoraria": "Carga hor√°ria ou 'N√£o informado'",
      "vagas": "N√∫mero de vagas ou 'N√£o informado'"
    }
  ],
  "resumoGeral": "Resumo sobre os cargos encontrados NESTES documentos espec√≠ficos"
}`;

      const aiResponse = await aiChatWithContext(prompt, 
        "Voc√™ √© um especialista em an√°lise de editais de concurso. Extraia informa√ß√µes EXCLUSIVAMENTE dos documentos fornecidos, sem usar conhecimento pr√©vio. Mantenha nomes de cargos e localiza√ß√µes EXATOS conforme o documento. Responda SEMPRE em JSON v√°lido.",
        {
          temperature: 0.05, // Mais determin√≠stico
          maxTokens: 2000
        }
      );

      let parsedResponse;
      try {
        parsedResponse = JSON.parse(aiResponse.content || '{}');
      } catch (parseError) {
        console.error('Erro ao fazer parse da resposta AI:', parseError);
        return {
          cargos: [],
          resumoGeral: "Erro ao processar informa√ß√µes sobre cargos.",
          totalEncontrado: 0
        };
      }

      // Enriquecer com informa√ß√µes de similarity e fonte
      const cargosEnriquecidos: CargoInfo[] = (parsedResponse.cargos || []).map((cargo: any, index: number) => ({
        ...cargo,
        similarity: resultadosUnicos[Math.min(index, resultadosUnicos.length - 1)]?.similarity || 0,
        fonte: resultadosUnicos[Math.min(index, resultadosUnicos.length - 1)]?.title || 'Documento processado'
      }));

      console.log(`‚úÖ Encontrados ${cargosEnriquecidos.length} cargos nos documentos`);

      return {
        cargos: cargosEnriquecidos,
        resumoGeral: parsedResponse.resumoGeral || `Encontrados ${cargosEnriquecidos.length} cargos nos documentos processados.`,
        totalEncontrado: cargosEnriquecidos.length
      };

    } catch (error) {
      console.error('‚ùå Erro ao buscar cargos:', error);
      throw error; // Propagar erro - SEM FALLBACK
    }
  }

  /**
   * Busca e organiza conhecimentos
   */
  async buscarConhecimentos(userId: string, query: string = "conhecimentos"): Promise<{
    disciplinas: ConteudoProgramaticoInfo[];
    resumoGeral: string;
    totalEncontrado: number;
  }> {
    try {
      console.log(`üìö Buscando conhecimentos para usu√°rio ${userId}...`);

      // Buscar contexto relevante para conhecimentos
      const conteudoQueries = [
        "conhecimentos disciplinas",
        "mat√©rias assuntos programa",
        "conhecimentos espec√≠ficos gerais",
        "bibliografia livros refer√™ncias",
        "temas t√≥picos estudar"
      ];

      let todosResultados: any[] = [];
      
      for (const conteudoQuery of conteudoQueries) {
        const resultados = await pineconeService.searchSimilarContent(
          `${query} ${conteudoQuery}`,
          userId,
          {
            topK: 12,
            // Remover filtro de categoria - buscar todos os dados do usu√°rio
            minSimilarity: 0.25
          }
        );
        todosResultados = [...todosResultados, ...resultados];
      }

      // Remover duplicatas
      const resultadosUnicos = todosResultados.filter((item, index, arr) => 
        arr.findIndex(t => t.content === item.content) === index
      );

      if (resultadosUnicos.length === 0) {
        return {
          disciplinas: [],
          resumoGeral: "Nenhum conhecimento encontrado nos documentos processados.",
          totalEncontrado: 0
        };
      }

      // Usar AI para extrair e organizar conhecimentos
      const contextText = resultadosUnicos
        .slice(0, 20) // Mais contexto para conhecimentos
        .map(r => `[${r.title}] ${r.content}`)
        .join('\n\n---\n\n');

      const prompt = `Analise o contexto abaixo e extraia TODAS as informa√ß√µes sobre conhecimentos de concurso.

CONTEXTO:
${contextText}

INSTRU√á√ïES:
1. Identifique TODAS as disciplinas/mat√©rias mencionadas
2. Para cada disciplina, extraia:
   - Nome da disciplina
   - Lista de t√≥picos/assuntos
   - Detalhamento espec√≠fico quando dispon√≠vel
3. Organize as informa√ß√µes por disciplina de forma hier√°rquica
4. Mantenha a estrutura original quando poss√≠vel

Responda em JSON no seguinte formato:
{
  "disciplinas": [
    {
      "disciplina": "Nome da Disciplina",
      "topicos": ["T√≥pico 1", "T√≥pico 2", "T√≥pico 3"],
      "detalhamento": "Detalhes espec√≠ficos se houver"
    }
  ],
  "resumoGeral": "Resumo geral sobre os conhecimentos encontrados"
}`;

      const aiResponse = await aiChatWithContext(prompt,
        "Voc√™ √© um especialista em an√°lise de conhecimentos de concursos. Extraia e organize as disciplinas e seus t√≥picos de forma precisa e hier√°rquica. Responda SEMPRE em JSON v√°lido.",
        {
          temperature: 0.1,
          maxTokens: 3000
        }
      );

      let parsedResponse;
      try {
        parsedResponse = JSON.parse(aiResponse.content || '{}');
      } catch (parseError) {
        console.error('Erro ao fazer parse da resposta AI:', parseError);
        return {
          disciplinas: [],
          resumoGeral: "Erro ao processar conhecimentos.",
          totalEncontrado: 0
        };
      }

      // Enriquecer com informa√ß√µes de similarity e fonte
      const disciplinasEnriquecidas: ConteudoProgramaticoInfo[] = (parsedResponse.disciplinas || []).map((disciplina: any, index: number) => ({
        ...disciplina,
        similarity: resultadosUnicos[Math.min(index, resultadosUnicos.length - 1)]?.similarity || 0,
        fonte: resultadosUnicos[Math.min(index, resultadosUnicos.length - 1)]?.title || 'Documento processado'
      }));

      console.log(`‚úÖ Encontradas ${disciplinasEnriquecidas.length} disciplinas nos conhecimentos`);

      return {
        disciplinas: disciplinasEnriquecidas,
        resumoGeral: parsedResponse.resumoGeral || `Encontradas ${disciplinasEnriquecidas.length} disciplinas nos conhecimentos.`,
        totalEncontrado: disciplinasEnriquecidas.length
      };

    } catch (error) {
      console.error('‚ùå Erro ao buscar conhecimentos:', error);
      return {
        disciplinas: [],
        resumoGeral: "Erro interno ao buscar conhecimentos.",
        totalEncontrado: 0
      };
    }
  }

  /**
   * Busca personalizada usando RAG para qualquer aspecto do edital
   */
  async buscarInformacaoPersonalizada(
    userId: string, 
    query: string, 
    documentId?: string // NOVO: filtrar por documento espec√≠fico
  ): Promise<{
    resposta: string;
    fontes: string[];
    temContexto: boolean;
  }> {
    try {
      const resultado = await this.ragService.generateContextualResponse({
        userId,
        query,
        // Remover filtro de categoria - buscar todos os dados do usu√°rio
        maxContextLength: 6000,
        minSimilarity: 0.2,
        enableReRanking: true,
        initialTopK: 20,
        finalTopK: 8,
        documentId // CR√çTICO: usar apenas documento espec√≠fico se fornecido
      });

      const fontes = resultado.contextUsed.map(ctx => ctx.title);

      return {
        resposta: resultado.response,
        fontes: Array.from(new Set(fontes)), // Remove duplicatas
        temContexto: resultado.hasContext
      };

    } catch (error) {
      console.error('‚ùå Erro na busca personalizada:', error);
      return {
        resposta: "Erro interno ao processar a consulta.",
        fontes: [],
        temContexto: false
      };
    }
  }
}

export const editalRAGService = new EditalRAGService();