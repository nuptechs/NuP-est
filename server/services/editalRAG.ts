import { RAGService } from './rag';
import { pineconeService } from './pinecone';
import { aiChatWithContext } from './ai/index';

interface CargoInfo {
  nome: string;
  requisitos?: string;
  atribuicoes?: string;
  salario?: string;
  cargaHoraria?: string;
  vagas?: number;
  similarity: number;
  fonte: string;
}

interface ConteudoProgramaticoInfo {
  disciplina: string;
  topicos: string[];
  detalhamento?: string;
  similarity: number;
  fonte: string;
}

export class EditalRAGService {
  private ragService = new RAGService();

  /**
   * Busca informa√ß√µes sobre cargos em documentos processados
   */
  async buscarCargos(userId: string, query: string = "cargos vagas concurso"): Promise<{
    cargos: CargoInfo[];
    resumoGeral: string;
    totalEncontrado: number;
  }> {
    try {
      console.log(`üéØ Buscando cargos para usu√°rio ${userId}...`);

      // Buscar contexto relevante usando RAG com queries espec√≠ficas para cargos
      const cargosQueries = [
        "cargo vaga requisitos forma√ß√£o",
        "atribui√ß√µes fun√ß√£o descri√ß√£o cargo",
        "sal√°rio remunera√ß√£o benef√≠cios",
        "carga hor√°ria trabalho",
        "n√∫mero vagas dispon√≠veis"
      ];

      let todosResultados: any[] = [];
      
      for (const cargoQuery of cargosQueries) {
        console.log(`üîç Buscando: "${query} ${cargoQuery}" para userId: ${userId}`);
        
        const resultados = await pineconeService.searchSimilarContent(
          `${query} ${cargoQuery}`,
          userId,
          {
            topK: 15,
            // Remover filtro de categoria - buscar todos os dados do usu√°rio
            minSimilarity: 0.2 // Menos restritivo
          }
        );
        
        console.log(`üîç Query "${cargoQuery}" retornou ${resultados.length} resultados`);
        todosResultados = [...todosResultados, ...resultados];
      }

      // Remover duplicatas baseado no conte√∫do
      const resultadosUnicos = todosResultados.filter((item, index, arr) => 
        arr.findIndex(t => t.content === item.content) === index
      );

      if (resultadosUnicos.length === 0) {
        console.log(`‚ùå Nenhum resultado encontrado no Pinecone para userId: ${userId}`);
        
        // SEM FALLBACK - falhar diretamente
        throw new Error('Nenhum dado encontrado no Pinecone para este usu√°rio. Verifique se o documento foi indexado corretamente.');
      }

      // Usar apenas resultados √∫nicos - SEM FALLBACK
      const resultadosParaProcessar = resultadosUnicos;
      
      // Usar AI para extrair e estruturar informa√ß√µes sobre cargos
      const contextText = resultadosParaProcessar
        .slice(0, 15) // Limitar para n√£o sobrecarregar
        .map(r => `[${r.title}] ${r.content}`)
        .join('\n\n---\n\n');
        
      console.log(`üìù Processando ${resultadosParaProcessar.length} resultados para an√°lise de cargos`);

      const prompt = `Analise EXCLUSIVAMENTE o contexto dos documentos fornecidos e extraia informa√ß√µes sobre cargos de concurso p√∫blico.

‚ö†Ô∏è  IMPORTANTE: Use APENAS informa√ß√µes presentes nestes documentos espec√≠ficos. N√ÉO use conhecimento pr√©vio sobre outros concursos.

CONTEXTO DOS DOCUMENTOS ATUAIS:
${contextText}

INSTRU√á√ïES CR√çTICAS:
1. Identifique cargos mencionados APENAS nestes documentos espec√≠ficos
2. Extraia o nome EXATO dos cargos conforme aparecem nos documentos
3. Se o documento menciona estado/UF espec√≠fico (SE, DF, RJ, etc.), mantenha essa informa√ß√£o EXATA
4. Para cada cargo, extraia:
   - Nome EXATO do cargo conforme aparece no documento
   - Requisitos de forma√ß√£o quando dispon√≠vel
   - Atribui√ß√µes e fun√ß√µes quando dispon√≠vel  
   - Sal√°rio/remunera√ß√£o quando dispon√≠vel
   - Carga hor√°ria quando dispon√≠vel
   - N√∫mero de vagas quando dispon√≠vel
5. Se alguma informa√ß√£o n√£o estiver nos documentos, marque como "N√£o informado"
6. N√ÉO invente ou complemente informa√ß√µes com conhecimento externo

Responda em JSON no seguinte formato:
{
  "cargos": [
    {
      "nome": "Nome exato do cargo conforme documento (incluindo UF se mencionada)",
      "requisitos": "Requisitos ou 'N√£o informado'",
      "atribuicoes": "Atribui√ß√µes ou 'N√£o informado'", 
      "salario": "Sal√°rio ou 'N√£o informado'",
      "cargaHoraria": "Carga hor√°ria ou 'N√£o informado'",
      "vagas": "N√∫mero de vagas ou 'N√£o informado'"
    }
  ],
  "resumoGeral": "Resumo sobre os cargos encontrados NESTES documentos espec√≠ficos"
}`;

      const aiResponse = await aiChatWithContext(prompt, 
        "Voc√™ √© um especialista em an√°lise de editais de concurso. Extraia informa√ß√µes EXCLUSIVAMENTE dos documentos fornecidos, sem usar conhecimento pr√©vio. Mantenha nomes de cargos e localiza√ß√µes EXATOS conforme o documento. Responda SEMPRE em JSON v√°lido.",
        {
          temperature: 0.05, // Mais determin√≠stico
          maxTokens: 2000
        }
      );

      let parsedResponse;
      try {
        parsedResponse = JSON.parse(aiResponse.content || '{}');
      } catch (parseError) {
        console.error('Erro ao fazer parse da resposta AI:', parseError);
        return {
          cargos: [],
          resumoGeral: "Erro ao processar informa√ß√µes sobre cargos.",
          totalEncontrado: 0
        };
      }

      // Enriquecer com informa√ß√µes de similarity e fonte
      const cargosEnriquecidos: CargoInfo[] = (parsedResponse.cargos || []).map((cargo: any, index: number) => ({
        ...cargo,
        similarity: resultadosUnicos[Math.min(index, resultadosUnicos.length - 1)]?.similarity || 0,
        fonte: resultadosUnicos[Math.min(index, resultadosUnicos.length - 1)]?.title || 'Documento processado'
      }));

      console.log(`‚úÖ Encontrados ${cargosEnriquecidos.length} cargos nos documentos`);

      return {
        cargos: cargosEnriquecidos,
        resumoGeral: parsedResponse.resumoGeral || `Encontrados ${cargosEnriquecidos.length} cargos nos documentos processados.`,
        totalEncontrado: cargosEnriquecidos.length
      };

    } catch (error) {
      console.error('‚ùå Erro ao buscar cargos:', error);
      throw error; // Propagar erro - SEM FALLBACK
    }
  }

  /**
   * Busca e organiza conte√∫do program√°tico
   */
  async buscarConteudoProgramatico(userId: string, query: string = "conte√∫do program√°tico disciplinas mat√©rias"): Promise<{
    disciplinas: ConteudoProgramaticoInfo[];
    resumoGeral: string;
    totalEncontrado: number;
  }> {
    try {
      console.log(`üìö Buscando conte√∫do program√°tico para usu√°rio ${userId}...`);

      // Buscar contexto relevante para conte√∫do program√°tico
      const conteudoQueries = [
        "conte√∫do program√°tico disciplinas",
        "mat√©rias assuntos programa",
        "conhecimentos espec√≠ficos gerais",
        "bibliografia livros refer√™ncias",
        "temas t√≥picos estudar"
      ];

      let todosResultados: any[] = [];
      
      for (const conteudoQuery of conteudoQueries) {
        const resultados = await pineconeService.searchSimilarContent(
          `${query} ${conteudoQuery}`,
          userId,
          {
            topK: 12,
            // Remover filtro de categoria - buscar todos os dados do usu√°rio
            minSimilarity: 0.25
          }
        );
        todosResultados = [...todosResultados, ...resultados];
      }

      // Remover duplicatas
      const resultadosUnicos = todosResultados.filter((item, index, arr) => 
        arr.findIndex(t => t.content === item.content) === index
      );

      if (resultadosUnicos.length === 0) {
        return {
          disciplinas: [],
          resumoGeral: "Nenhum conte√∫do program√°tico encontrado nos documentos processados.",
          totalEncontrado: 0
        };
      }

      // Usar AI para extrair e organizar conte√∫do program√°tico
      const contextText = resultadosUnicos
        .slice(0, 20) // Mais contexto para conte√∫do program√°tico
        .map(r => `[${r.title}] ${r.content}`)
        .join('\n\n---\n\n');

      const prompt = `Analise o contexto abaixo e extraia TODAS as informa√ß√µes sobre conte√∫do program√°tico de concurso.

CONTEXTO:
${contextText}

INSTRU√á√ïES:
1. Identifique TODAS as disciplinas/mat√©rias mencionadas
2. Para cada disciplina, extraia:
   - Nome da disciplina
   - Lista de t√≥picos/assuntos
   - Detalhamento espec√≠fico quando dispon√≠vel
3. Organize as informa√ß√µes por disciplina de forma hier√°rquica
4. Mantenha a estrutura original quando poss√≠vel

Responda em JSON no seguinte formato:
{
  "disciplinas": [
    {
      "disciplina": "Nome da Disciplina",
      "topicos": ["T√≥pico 1", "T√≥pico 2", "T√≥pico 3"],
      "detalhamento": "Detalhes espec√≠ficos se houver"
    }
  ],
  "resumoGeral": "Resumo geral sobre o conte√∫do program√°tico encontrado"
}`;

      const aiResponse = await aiChatWithContext(prompt,
        "Voc√™ √© um especialista em an√°lise de conte√∫do program√°tico de concursos. Extraia e organize as disciplinas e seus t√≥picos de forma precisa e hier√°rquica. Responda SEMPRE em JSON v√°lido.",
        {
          temperature: 0.1,
          maxTokens: 3000
        }
      );

      let parsedResponse;
      try {
        parsedResponse = JSON.parse(aiResponse.content || '{}');
      } catch (parseError) {
        console.error('Erro ao fazer parse da resposta AI:', parseError);
        return {
          disciplinas: [],
          resumoGeral: "Erro ao processar conte√∫do program√°tico.",
          totalEncontrado: 0
        };
      }

      // Enriquecer com informa√ß√µes de similarity e fonte
      const disciplinasEnriquecidas: ConteudoProgramaticoInfo[] = (parsedResponse.disciplinas || []).map((disciplina: any, index: number) => ({
        ...disciplina,
        similarity: resultadosUnicos[Math.min(index, resultadosUnicos.length - 1)]?.similarity || 0,
        fonte: resultadosUnicos[Math.min(index, resultadosUnicos.length - 1)]?.title || 'Documento processado'
      }));

      console.log(`‚úÖ Encontradas ${disciplinasEnriquecidas.length} disciplinas no conte√∫do program√°tico`);

      return {
        disciplinas: disciplinasEnriquecidas,
        resumoGeral: parsedResponse.resumoGeral || `Encontradas ${disciplinasEnriquecidas.length} disciplinas no conte√∫do program√°tico.`,
        totalEncontrado: disciplinasEnriquecidas.length
      };

    } catch (error) {
      console.error('‚ùå Erro ao buscar conte√∫do program√°tico:', error);
      return {
        disciplinas: [],
        resumoGeral: "Erro interno ao buscar conte√∫do program√°tico.",
        totalEncontrado: 0
      };
    }
  }

  /**
   * Busca personalizada usando RAG para qualquer aspecto do edital
   */
  async buscarInformacaoPersonalizada(userId: string, query: string): Promise<{
    resposta: string;
    fontes: string[];
    temContexto: boolean;
  }> {
    try {
      const resultado = await this.ragService.generateContextualResponse({
        userId,
        query,
        // Remover filtro de categoria - buscar todos os dados do usu√°rio
        maxContextLength: 6000,
        minSimilarity: 0.2,
        enableReRanking: true,
        initialTopK: 20,
        finalTopK: 8
      });

      const fontes = resultado.contextUsed.map(ctx => ctx.title);

      return {
        resposta: resultado.response,
        fontes: Array.from(new Set(fontes)), // Remove duplicatas
        temContexto: resultado.hasContext
      };

    } catch (error) {
      console.error('‚ùå Erro na busca personalizada:', error);
      return {
        resposta: "Erro interno ao processar a consulta.",
        fontes: [],
        temContexto: false
      };
    }
  }
}

export const editalRAGService = new EditalRAGService();